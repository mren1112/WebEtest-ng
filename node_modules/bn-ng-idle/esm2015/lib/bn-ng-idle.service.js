/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { fromEvent, merge, Subject, timer } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class BnNgIdleService {
    constructor() {
        this.expired$ = new Subject();
    }
    /**
     * @param {?} timeOutSeconds
     * @return {?}
     */
    startWatching(timeOutSeconds) {
        this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));
        this.timeOutMilliSeconds = timeOutSeconds * 1000;
        this.idleSubscription = this.idle$.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.resetTimer();
        }));
        this.startTimer();
        return this.expired$;
    }
    /**
     * @private
     * @return {?}
     */
    startTimer() {
        this.timer$ = timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.expired$.next(true);
        }));
    }
    /**
     * @return {?}
     */
    resetTimer() {
        this.timer$.unsubscribe();
        this.startTimer();
    }
    /**
     * @return {?}
     */
    stopTimer() {
        this.timer$.unsubscribe();
        this.idleSubscription.unsubscribe();
    }
}
BnNgIdleService.ɵfac = function BnNgIdleService_Factory(t) { return new (t || BnNgIdleService)(); };
BnNgIdleService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BnNgIdleService, factory: BnNgIdleService.ɵfac, providedIn: 'root' });
/** @nocollapse */
BnNgIdleService.ctorParameters = () => [];
/** @nocollapse */ BnNgIdleService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function BnNgIdleService_Factory() { return new BnNgIdleService(); }, token: BnNgIdleService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BnNgIdleService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    BnNgIdleService.prototype.idle$;
    /**
     * @type {?}
     * @private
     */
    BnNgIdleService.prototype.timer$;
    /**
     * @type {?}
     * @private
     */
    BnNgIdleService.prototype.timeOutMilliSeconds;
    /**
     * @type {?}
     * @private
     */
    BnNgIdleService.prototype.idleSubscription;
    /** @type {?} */
    BnNgIdleService.prototype.expired$;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm4tbmctaWRsZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovYm4tbmctaWRsZS9saWIvYm4tbmctaWRsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEU7O0FBS0EsTUFBTSxPQUFPLGVBQWU7QUFDNUIsSUFRRTtBQUNGLFFBSFMsYUFBUSxHQUFxQixJQUFJLE9BQU8sRUFBVyxDQUFDO0FBQzdELElBR0UsQ0FBQztBQUNIO0FBQ087QUFBaUM7QUFDdkM7QUFBUSxJQURBLGFBQWEsQ0FBQyxjQUFjO0FBQUksUUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQ2hCLFNBQVMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEVBQ2hDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQzVCLFNBQVMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEVBQ2hDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLEVBQy9CLFNBQVMsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsRUFDckMsU0FBUyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsRUFDakMsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFDaEMsU0FBUyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsRUFDcEMsU0FBUyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsRUFDOUIsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FDNUIsQ0FBQztBQUNOLFFBQ0ksSUFBSSxDQUFDLG1CQUFtQixHQUFHLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFDckQsUUFDSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTO0FBQU07QUFDbEM7QUFHWDtBQUFZLFFBSjRCLENBQUMsR0FBRyxFQUFFLEVBQUU7QUFDekQsWUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDeEIsUUFBSSxDQUFDLEVBQUMsQ0FBQztBQUNQLFFBQ0ksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3RCLFFBQ0ksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBZ0I7QUFDTjtBQUFRLElBRGYsVUFBVTtBQUNwQixRQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxTQUFTO0FBQU07QUFDdEU7QUFFakI7QUFFTyxRQUwyRSxDQUFDLEdBQUcsRUFBRSxFQUFFO0FBQzdGLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsUUFBSSxDQUFDLEVBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNIO0FBQ087QUFDTDtBQUFRLElBREQsVUFBVTtBQUNuQixRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDOUIsUUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDdEIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNKO0FBQVEsSUFERixTQUFTO0FBQ2xCLFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM5QixRQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN4QyxJQUFFLENBQUM7QUFDSDsyQ0F4REMsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNO1dBQ25CLHNIQUNJO0FBQUM7QUFBbUI7QUFHdkI7Ozs7OztnREFVNkI7QUFBQztBQUFhO0FBQVE7QUFDekM7QUFDUjtBQUFRLElBYlYsZ0NBQStCO0FBQ2pDO0FBQVE7QUFDRDtBQUFnQjtBQUFRLElBRDdCLGlDQUFlO0FBQ2pCO0FBQVE7QUFBaUI7QUFDdkI7QUFBUSxJQURSLDhDQUFvQztBQUN0QztBQUFRO0FBQWlCO0FBRWI7QUFBUSxJQUZsQiwyQ0FBeUI7QUFDM0I7QUFDb0IsSUFBbEIsbUNBQTJEOztBQWRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFTQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBdkRBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbUV2ZW50LCBtZXJnZSwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCbk5nSWRsZVNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIGlkbGUkOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgcHJpdmF0ZSB0aW1lciQ7XHJcbiAgcHJpdmF0ZSB0aW1lT3V0TWlsbGlTZWNvbmRzOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBpZGxlU3Vic2NyaXB0aW9uO1xyXG5cclxuICBwdWJsaWMgZXhwaXJlZCQ6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhcnRXYXRjaGluZyh0aW1lT3V0U2Vjb25kcyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICB0aGlzLmlkbGUkID0gbWVyZ2UoXHJcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ21vdXNlbW92ZScpLFxyXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpLFxyXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZWRvd24nKSxcclxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAna2V5cHJlc3MnKSxcclxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnRE9NTW91c2VTY3JvbGwnKSxcclxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnbW91c2V3aGVlbCcpLFxyXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICd0b3VjaG1vdmUnKSxcclxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnTVNQb2ludGVyTW92ZScpLFxyXG4gICAgICBmcm9tRXZlbnQod2luZG93LCAnbW91c2Vtb3ZlJyksXHJcbiAgICAgIGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKSxcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy50aW1lT3V0TWlsbGlTZWNvbmRzID0gdGltZU91dFNlY29uZHMgKiAxMDAwO1xyXG5cclxuICAgIHRoaXMuaWRsZVN1YnNjcmlwdGlvbiA9IHRoaXMuaWRsZSQuc3Vic2NyaWJlKChyZXMpID0+IHtcclxuICAgICAgdGhpcy5yZXNldFRpbWVyKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnN0YXJ0VGltZXIoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5leHBpcmVkJDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhcnRUaW1lcigpIHtcclxuICAgdGhpcy50aW1lciQgPSB0aW1lcih0aGlzLnRpbWVPdXRNaWxsaVNlY29uZHMsIHRoaXMudGltZU91dE1pbGxpU2Vjb25kcykuc3Vic2NyaWJlKChyZXMpID0+IHtcclxuICAgICAgdGhpcy5leHBpcmVkJC5uZXh0KHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXRUaW1lcigpIHtcclxuICAgIHRoaXMudGltZXIkLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLnN0YXJ0VGltZXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdG9wVGltZXIoKSB7XHJcbiAgICB0aGlzLnRpbWVyJC51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5pZGxlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==