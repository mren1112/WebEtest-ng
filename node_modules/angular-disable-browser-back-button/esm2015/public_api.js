import * as tslib_1 from "tslib";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
var BackButtonDisableModule_1;
import { NgModule, Injectable, Inject } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
function _window() {
    return window;
}
let WindowRef = class WindowRef {
    get nativeWindow() {
        return _window();
    }
};
WindowRef.ɵfac = function WindowRef_Factory(t) { return new (t || WindowRef)(); };
WindowRef.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: WindowRef, factory: WindowRef.ɵfac });
export { WindowRef };
let BackButtonDisableModule = BackButtonDisableModule_1 = class BackButtonDisableModule {
    constructor(router, windowRef, preserveScrollPosition) {
        this.router = router;
        this.windowRef = windowRef;
        this.preserveScrollPosition = preserveScrollPosition;
        this.scrollX = 0;
        this.scrollY = 0;
        this.window = this.windowRef.nativeWindow;
        this.disableBackButton();
        this.addPopStateEventListener();
    }
    static forRoot(config) {
        return {
            ngModule: BackButtonDisableModule_1,
            providers: [
                {
                    provide: 'preserveScrollPosition',
                    useValue: config && 'preserveScrollPosition' in config ? config.preserveScrollPosition : false
                }
            ]
        };
    }
    addPopStateEventListener() {
        this.window.addEventListener('popstate', () => {
            if (this.preserveScrollPosition)
                this.getScrollCoordinates();
            this.window.history.pushState(null, null, null);
            if (this.preserveScrollPosition)
                setTimeout(this.scrollToThePreviousPosition.bind(this));
        });
    }
    scrollToThePreviousPosition() {
        this.window.scrollTo(this.scrollX, this.scrollY);
    }
    getScrollCoordinates() {
        this.scrollX = this.window.scrollX;
        this.scrollY = this.window.scrollY;
    }
    disableBackButton() {
        this.window.history.pushState(null, null, null);
        this.router.events.subscribe(event => {
            if (event instanceof NavigationEnd) {
                this.window.history.pushState(null, null, null);
            }
            ;
        });
    }
};
BackButtonDisableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BackButtonDisableModule });
BackButtonDisableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BackButtonDisableModule_Factory(t) { return new (t || BackButtonDisableModule)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject('preserveScrollPosition')); }, providers: [WindowRef] });
BackButtonDisableModule.ctorParameters = () => [
    { type: Router },
    { type: WindowRef },
    { type: Boolean, decorators: [{ type: Inject, args: ['preserveScrollPosition',] }] }
];
BackButtonDisableModule = BackButtonDisableModule_1 = tslib_1.__decorate([ tslib_1.__param(2, Inject('preserveScrollPosition'))
], BackButtonDisableModule);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WindowRef, [{
        type: Injectable
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BackButtonDisableModule, [{
        type: NgModule,
        args: [{
                providers: [WindowRef]
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: WindowRef }, { type: Boolean, decorators: [{
                type: Inject,
                args: ['preserveScrollPosition']
            }] }]; }, null); })();
export { BackButtonDisableModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItZGlzYWJsZS1icm93c2VyLWJhY2stYnV0dG9uL3B1YmxpY19hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUF1QixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCxTQUFTLE9BQU87QUFBSyxJQUNuQixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBR0QsSUFBYSxTQUFTLEdBQXRCLE1BQWEsU0FBUztBQUN0QixJQUFFLElBQUksWUFBWTtBQUFLLFFBQ25CLE9BQU8sT0FBTyxFQUFFLENBQUM7QUFDckIsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBSlksU0FBUyw0QkFEckIsVUFBVSxFQUFFLElBQ0EsU0FBUyxDQUlyQjsyRkFDRDtBQUNBLFNBTmEsU0FBUztBQVN0QixJQUFhLHVCQUF1QiwrQkFBcEMsTUFBYSx1QkFBdUI7QUFDcEMsSUFLRSxZQUNVLE1BQWMsRUFDZCxTQUFvQixFQUNjLHNCQUErQjtBQUMxRSxRQUhTLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxRQUNmLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQUNhLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBUztBQUM3RSxRQVBVLFlBQU8sR0FBRyxDQUFDLENBQUM7QUFDdEIsUUFBVSxZQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ3RCLFFBTUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQTtBQUM3QyxRQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzdCLFFBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7QUFDcEMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQTRDO0FBQUksUUFDN0QsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLHlCQUF1QjtBQUN2QyxZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSx3QkFBd0I7QUFDM0Msb0JBQVUsUUFBUSxFQUFFLE1BQU0sSUFBSSx3QkFBd0IsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsS0FBSztBQUN4RyxpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLLENBQUE7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLHdCQUF3QjtBQUFLLFFBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtBQUNsRCxZQUFNLElBQUksSUFBSSxDQUFDLHNCQUFzQjtBQUFFLGdCQUFBLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQ25FLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEQsWUFBTSxJQUFJLElBQUksQ0FBQyxzQkFBc0I7QUFBRSxnQkFBQSxVQUFVLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQy9GLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNVLDJCQUEyQjtBQUFLLFFBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELElBQUUsQ0FBQztBQUNILElBQ1Usb0JBQW9CO0FBQUssUUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUN2QyxRQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDdkMsSUFBRSxDQUFDO0FBQ0gsSUFDVSxpQkFBaUI7QUFBSyxRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNwRCxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QyxZQUFNLElBQUksS0FBSyxZQUFZLGFBQWEsRUFBRTtBQUMxQyxnQkFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN4RCxhQUFPO0FBQUMsWUFBRCxDQUFDO0FBQ1IsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILENBQUM7OytSQUFBO0FBQ0Q7QUFBaUQsWUEvQzdCLE1BQU07QUFDeEIsWUFBcUIsU0FBUztBQUM5QiwwQ0FBRyxNQUFNLFNBQUMsd0JBQXdCO0FBQVE7QUFUL0IsdUJBQXVCLHdEQUhuQyxRQUFRLENBQUMsVUFDUixTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFDdkIsQ0FBQyxyREFDRSxDQVNDLG1CQUFBLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0FBQUMsR0FUekIsdUJBQXVCLENBcURuQzs7Ozs7Ozs7Ozs7O2tDQUNEO0FBQUMsU0F0RFksdUJBQXVCO0FBRXBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdGFibGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBOYXZpZ2F0aW9uRW5kIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuZnVuY3Rpb24gX3dpbmRvdygpOiBhbnkge1xuICByZXR1cm4gd2luZG93O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgV2luZG93UmVmIHtcbiAgZ2V0IG5hdGl2ZVdpbmRvdygpOiBhbnkge1xuICAgIHJldHVybiBfd2luZG93KCk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbV2luZG93UmVmXVxufSlcbmV4cG9ydCBjbGFzcyBCYWNrQnV0dG9uRGlzYWJsZU1vZHVsZSB7XG5cbiAgcHJpdmF0ZSB3aW5kb3c6IFdpbmRvdztcbiAgcHJpdmF0ZSBzY3JvbGxYID0gMDtcbiAgcHJpdmF0ZSBzY3JvbGxZID0gMDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgd2luZG93UmVmOiBXaW5kb3dSZWYsXG4gICAgQEluamVjdCgncHJlc2VydmVTY3JvbGxQb3NpdGlvbicpIHByaXZhdGUgcHJlc2VydmVTY3JvbGxQb3NpdGlvbjogYm9vbGVhblxuICApIHtcbiAgICB0aGlzLndpbmRvdyA9IHRoaXMud2luZG93UmVmLm5hdGl2ZVdpbmRvd1xuICAgIHRoaXMuZGlzYWJsZUJhY2tCdXR0b24oKTtcbiAgICB0aGlzLmFkZFBvcFN0YXRlRXZlbnRMaXN0ZW5lcigpO1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogeyBwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uOiBib29sZWFuIH0pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEJhY2tCdXR0b25EaXNhYmxlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiAncHJlc2VydmVTY3JvbGxQb3NpdGlvbicsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZyAmJiAncHJlc2VydmVTY3JvbGxQb3NpdGlvbicgaW4gY29uZmlnID8gY29uZmlnLnByZXNlcnZlU2Nyb2xsUG9zaXRpb24gOiBmYWxzZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRQb3BTdGF0ZUV2ZW50TGlzdGVuZXIoKTogdm9pZCB7XG4gICAgdGhpcy53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uKSB0aGlzLmdldFNjcm9sbENvb3JkaW5hdGVzKCk7XG4gICAgICB0aGlzLndpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBudWxsKTtcbiAgICAgIGlmICh0aGlzLnByZXNlcnZlU2Nyb2xsUG9zaXRpb24pIHNldFRpbWVvdXQodGhpcy5zY3JvbGxUb1RoZVByZXZpb3VzUG9zaXRpb24uYmluZCh0aGlzKSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNjcm9sbFRvVGhlUHJldmlvdXNQb3NpdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLndpbmRvdy5zY3JvbGxUbyh0aGlzLnNjcm9sbFgsIHRoaXMuc2Nyb2xsWSk7XG4gIH1cblxuICBwcml2YXRlIGdldFNjcm9sbENvb3JkaW5hdGVzKCk6IHZvaWQge1xuICAgIHRoaXMuc2Nyb2xsWCA9IHRoaXMud2luZG93LnNjcm9sbFg7XG4gICAgdGhpcy5zY3JvbGxZID0gdGhpcy53aW5kb3cuc2Nyb2xsWTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzYWJsZUJhY2tCdXR0b24oKTogdm9pZCB7XG4gICAgdGhpcy53aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgdGhpcy5yb3V0ZXIuZXZlbnRzLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSB7XG4gICAgICAgIHRoaXMud2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuIl19