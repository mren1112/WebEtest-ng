import { __decorate, __param } from 'tslib';
import { Injectable, Inject, NgModule } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
var BackButtonDisableModule_1;
function _window() {
    return window;
}
let WindowRef = class WindowRef {
    get nativeWindow() {
        return _window();
    }
};
WindowRef.ɵfac = function WindowRef_Factory(t) { return new (t || WindowRef)(); };
WindowRef.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: WindowRef, factory: WindowRef.ɵfac });
let BackButtonDisableModule = BackButtonDisableModule_1 = class BackButtonDisableModule {
    constructor(router, windowRef, preserveScrollPosition) {
        this.router = router;
        this.windowRef = windowRef;
        this.preserveScrollPosition = preserveScrollPosition;
        this.scrollX = 0;
        this.scrollY = 0;
        this.window = this.windowRef.nativeWindow;
        this.disableBackButton();
        this.addPopStateEventListener();
    }
    static forRoot(config) {
        return {
            ngModule: BackButtonDisableModule_1,
            providers: [
                {
                    provide: 'preserveScrollPosition',
                    useValue: config && 'preserveScrollPosition' in config ? config.preserveScrollPosition : false
                }
            ]
        };
    }
    addPopStateEventListener() {
        this.window.addEventListener('popstate', () => {
            if (this.preserveScrollPosition)
                this.getScrollCoordinates();
            this.window.history.pushState(null, null, null);
            if (this.preserveScrollPosition)
                setTimeout(this.scrollToThePreviousPosition.bind(this));
        });
    }
    scrollToThePreviousPosition() {
        this.window.scrollTo(this.scrollX, this.scrollY);
    }
    getScrollCoordinates() {
        this.scrollX = this.window.scrollX;
        this.scrollY = this.window.scrollY;
    }
    disableBackButton() {
        this.window.history.pushState(null, null, null);
        this.router.events.subscribe(event => {
            if (event instanceof NavigationEnd) {
                this.window.history.pushState(null, null, null);
            }
            ;
        });
    }
};
BackButtonDisableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BackButtonDisableModule });
BackButtonDisableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BackButtonDisableModule_Factory(t) { return new (t || BackButtonDisableModule)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject('preserveScrollPosition')); }, providers: [WindowRef] });
BackButtonDisableModule.ctorParameters = () => [
    { type: Router },
    { type: WindowRef },
    { type: Boolean, decorators: [{ type: Inject, args: ['preserveScrollPosition',] }] }
];
BackButtonDisableModule = BackButtonDisableModule_1 = __decorate([ __param(2, Inject('preserveScrollPosition'))
], BackButtonDisableModule);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WindowRef, [{
        type: Injectable
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BackButtonDisableModule, [{
        type: NgModule,
        args: [{
                providers: [WindowRef]
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: WindowRef }, { type: Boolean, decorators: [{
                type: Inject,
                args: ['preserveScrollPosition']
            }] }]; }, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { BackButtonDisableModule, WindowRef };

//# sourceMappingURL=angular-disable-browser-back-button.js.map